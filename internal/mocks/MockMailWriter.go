// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/mailslurper/mailslurper/v2/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockMailWriter is an autogenerated mock type for the MailWriter type
type MockMailWriter struct {
	mock.Mock
}

type MockMailWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailWriter) EXPECT() *MockMailWriter_Expecter {
	return &MockMailWriter_Expecter{mock: &_m.Mock}
}

// StoreMail provides a mock function with given fields: mailItem
func (_m *MockMailWriter) StoreMail(mailItem *model.MailItem) error {
	ret := _m.Called(mailItem)

	if len(ret) == 0 {
		panic("no return value specified for StoreMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.MailItem) error); ok {
		r0 = rf(mailItem)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMailWriter_StoreMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreMail'
type MockMailWriter_StoreMail_Call struct {
	*mock.Call
}

// StoreMail is a helper method to define mock.On call
//   - mailItem *model.MailItem
func (_e *MockMailWriter_Expecter) StoreMail(mailItem interface{}) *MockMailWriter_StoreMail_Call {
	return &MockMailWriter_StoreMail_Call{Call: _e.mock.On("StoreMail", mailItem)}
}

func (_c *MockMailWriter_StoreMail_Call) Run(run func(mailItem *model.MailItem)) *MockMailWriter_StoreMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.MailItem))
	})
	return _c
}

func (_c *MockMailWriter_StoreMail_Call) Return(_a0 error) *MockMailWriter_StoreMail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMailWriter_StoreMail_Call) RunAndReturn(run func(*model.MailItem) error) *MockMailWriter_StoreMail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailWriter creates a new instance of MockMailWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailWriter {
	mock := &MockMailWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
