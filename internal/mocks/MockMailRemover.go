// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockMailRemover is an autogenerated mock type for the MailRemover type
type MockMailRemover struct {
	mock.Mock
}

type MockMailRemover_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailRemover) EXPECT() *MockMailRemover_Expecter {
	return &MockMailRemover_Expecter{mock: &_m.Mock}
}

// DeleteMailsAfterDate provides a mock function with given fields: _a0
func (_m *MockMailRemover) DeleteMailsAfterDate(_a0 string) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMailsAfterDate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailRemover_DeleteMailsAfterDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMailsAfterDate'
type MockMailRemover_DeleteMailsAfterDate_Call struct {
	*mock.Call
}

// DeleteMailsAfterDate is a helper method to define mock.On call
//   - _a0 string
func (_e *MockMailRemover_Expecter) DeleteMailsAfterDate(_a0 interface{}) *MockMailRemover_DeleteMailsAfterDate_Call {
	return &MockMailRemover_DeleteMailsAfterDate_Call{Call: _e.mock.On("DeleteMailsAfterDate", _a0)}
}

func (_c *MockMailRemover_DeleteMailsAfterDate_Call) Run(run func(_a0 string)) *MockMailRemover_DeleteMailsAfterDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMailRemover_DeleteMailsAfterDate_Call) Return(_a0 int64, _a1 error) *MockMailRemover_DeleteMailsAfterDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailRemover_DeleteMailsAfterDate_Call) RunAndReturn(run func(string) (int64, error)) *MockMailRemover_DeleteMailsAfterDate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailRemover creates a new instance of MockMailRemover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailRemover(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailRemover {
	mock := &MockMailRemover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
