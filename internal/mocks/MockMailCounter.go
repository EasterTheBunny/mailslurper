// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	persistence "github.com/mailslurper/mailslurper/v2/internal/persistence"
	mock "github.com/stretchr/testify/mock"
)

// MockMailCounter is an autogenerated mock type for the MailCounter type
type MockMailCounter struct {
	mock.Mock
}

type MockMailCounter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailCounter) EXPECT() *MockMailCounter_Expecter {
	return &MockMailCounter_Expecter{mock: &_m.Mock}
}

// GetMailCount provides a mock function with given fields: _a0
func (_m *MockMailCounter) GetMailCount(_a0 *persistence.MailSearch) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMailCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*persistence.MailSearch) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*persistence.MailSearch) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*persistence.MailSearch) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMailCounter_GetMailCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailCount'
type MockMailCounter_GetMailCount_Call struct {
	*mock.Call
}

// GetMailCount is a helper method to define mock.On call
//   - _a0 *persistence.MailSearch
func (_e *MockMailCounter_Expecter) GetMailCount(_a0 interface{}) *MockMailCounter_GetMailCount_Call {
	return &MockMailCounter_GetMailCount_Call{Call: _e.mock.On("GetMailCount", _a0)}
}

func (_c *MockMailCounter_GetMailCount_Call) Run(run func(_a0 *persistence.MailSearch)) *MockMailCounter_GetMailCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*persistence.MailSearch))
	})
	return _c
}

func (_c *MockMailCounter_GetMailCount_Call) Return(_a0 int, _a1 error) *MockMailCounter_GetMailCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMailCounter_GetMailCount_Call) RunAndReturn(run func(*persistence.MailSearch) (int, error)) *MockMailCounter_GetMailCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMailCounter creates a new instance of MockMailCounter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailCounter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailCounter {
	mock := &MockMailCounter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
