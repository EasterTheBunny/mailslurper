// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	model "github.com/mailslurper/mailslurper/v2/internal/model"
	persistence "github.com/mailslurper/mailslurper/v2/internal/persistence"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/gofrs/uuid"
)

// MockPersistance is an autogenerated mock type for the Persistance type
type MockPersistance struct {
	mock.Mock
}

type MockPersistance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPersistance) EXPECT() *MockPersistance_Expecter {
	return &MockPersistance_Expecter{mock: &_m.Mock}
}

// DeleteMailsAfterDate provides a mock function with given fields: _a0
func (_m *MockPersistance) DeleteMailsAfterDate(_a0 string) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMailsAfterDate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersistance_DeleteMailsAfterDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMailsAfterDate'
type MockPersistance_DeleteMailsAfterDate_Call struct {
	*mock.Call
}

// DeleteMailsAfterDate is a helper method to define mock.On call
//   - _a0 string
func (_e *MockPersistance_Expecter) DeleteMailsAfterDate(_a0 interface{}) *MockPersistance_DeleteMailsAfterDate_Call {
	return &MockPersistance_DeleteMailsAfterDate_Call{Call: _e.mock.On("DeleteMailsAfterDate", _a0)}
}

func (_c *MockPersistance_DeleteMailsAfterDate_Call) Run(run func(_a0 string)) *MockPersistance_DeleteMailsAfterDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPersistance_DeleteMailsAfterDate_Call) Return(_a0 int64, _a1 error) *MockPersistance_DeleteMailsAfterDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersistance_DeleteMailsAfterDate_Call) RunAndReturn(run func(string) (int64, error)) *MockPersistance_DeleteMailsAfterDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailByID provides a mock function with given fields: _a0
func (_m *MockPersistance) GetMailByID(_a0 uuid.UUID) (*model.MailItem, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMailByID")
	}

	var r0 *model.MailItem
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*model.MailItem, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *model.MailItem); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MailItem)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersistance_GetMailByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailByID'
type MockPersistance_GetMailByID_Call struct {
	*mock.Call
}

// GetMailByID is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *MockPersistance_Expecter) GetMailByID(_a0 interface{}) *MockPersistance_GetMailByID_Call {
	return &MockPersistance_GetMailByID_Call{Call: _e.mock.On("GetMailByID", _a0)}
}

func (_c *MockPersistance_GetMailByID_Call) Run(run func(_a0 uuid.UUID)) *MockPersistance_GetMailByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockPersistance_GetMailByID_Call) Return(_a0 *model.MailItem, _a1 error) *MockPersistance_GetMailByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersistance_GetMailByID_Call) RunAndReturn(run func(uuid.UUID) (*model.MailItem, error)) *MockPersistance_GetMailByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailCollection provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockPersistance) GetMailCollection(_a0 int, _a1 int, _a2 *persistence.MailSearch) ([]model.MailItem, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetMailCollection")
	}

	var r0 []model.MailItem
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, *persistence.MailSearch) ([]model.MailItem, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(int, int, *persistence.MailSearch) []model.MailItem); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MailItem)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, *persistence.MailSearch) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersistance_GetMailCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailCollection'
type MockPersistance_GetMailCollection_Call struct {
	*mock.Call
}

// GetMailCollection is a helper method to define mock.On call
//   - _a0 int
//   - _a1 int
//   - _a2 *persistence.MailSearch
func (_e *MockPersistance_Expecter) GetMailCollection(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockPersistance_GetMailCollection_Call {
	return &MockPersistance_GetMailCollection_Call{Call: _e.mock.On("GetMailCollection", _a0, _a1, _a2)}
}

func (_c *MockPersistance_GetMailCollection_Call) Run(run func(_a0 int, _a1 int, _a2 *persistence.MailSearch)) *MockPersistance_GetMailCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(*persistence.MailSearch))
	})
	return _c
}

func (_c *MockPersistance_GetMailCollection_Call) Return(_a0 []model.MailItem, _a1 error) *MockPersistance_GetMailCollection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersistance_GetMailCollection_Call) RunAndReturn(run func(int, int, *persistence.MailSearch) ([]model.MailItem, error)) *MockPersistance_GetMailCollection_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailCount provides a mock function with given fields: _a0
func (_m *MockPersistance) GetMailCount(_a0 *persistence.MailSearch) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMailCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*persistence.MailSearch) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*persistence.MailSearch) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*persistence.MailSearch) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersistance_GetMailCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailCount'
type MockPersistance_GetMailCount_Call struct {
	*mock.Call
}

// GetMailCount is a helper method to define mock.On call
//   - _a0 *persistence.MailSearch
func (_e *MockPersistance_Expecter) GetMailCount(_a0 interface{}) *MockPersistance_GetMailCount_Call {
	return &MockPersistance_GetMailCount_Call{Call: _e.mock.On("GetMailCount", _a0)}
}

func (_c *MockPersistance_GetMailCount_Call) Run(run func(_a0 *persistence.MailSearch)) *MockPersistance_GetMailCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*persistence.MailSearch))
	})
	return _c
}

func (_c *MockPersistance_GetMailCount_Call) Return(_a0 int, _a1 error) *MockPersistance_GetMailCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersistance_GetMailCount_Call) RunAndReturn(run func(*persistence.MailSearch) (int, error)) *MockPersistance_GetMailCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetMailMessageRawByID provides a mock function with given fields: _a0
func (_m *MockPersistance) GetMailMessageRawByID(_a0 uuid.UUID) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMailMessageRawByID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPersistance_GetMailMessageRawByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMailMessageRawByID'
type MockPersistance_GetMailMessageRawByID_Call struct {
	*mock.Call
}

// GetMailMessageRawByID is a helper method to define mock.On call
//   - _a0 uuid.UUID
func (_e *MockPersistance_Expecter) GetMailMessageRawByID(_a0 interface{}) *MockPersistance_GetMailMessageRawByID_Call {
	return &MockPersistance_GetMailMessageRawByID_Call{Call: _e.mock.On("GetMailMessageRawByID", _a0)}
}

func (_c *MockPersistance_GetMailMessageRawByID_Call) Run(run func(_a0 uuid.UUID)) *MockPersistance_GetMailMessageRawByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uuid.UUID))
	})
	return _c
}

func (_c *MockPersistance_GetMailMessageRawByID_Call) Return(_a0 string, _a1 error) *MockPersistance_GetMailMessageRawByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPersistance_GetMailMessageRawByID_Call) RunAndReturn(run func(uuid.UUID) (string, error)) *MockPersistance_GetMailMessageRawByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPersistance creates a new instance of MockPersistance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPersistance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPersistance {
	mock := &MockPersistance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
